"Free Text" "GOTO ContinueWithEndinit, DoTMLInitializations, EQ; //Branch to ContinueWithEndinit if DoTMLInitializations == 0\r\n" 
"Free Text" "RET;\r\n" 
"Free Text" "ContinueWithEndinit: //Define label named ContinueWithEndinit\r\n" 
"Free Text" "int REFTST_B, RINCTST_B, OSR_B, UPGRADE_B; // Define integer variables REFTST_B, RINCTST_B, OSR_B, UPGRADE_B\r\n" 
"Free Text" "long ENC2THL_B; // Define long integer variable ENC2THL_B\r\n" 
"Free Text" "int temp1, I_nom_2, indexx, auxx1, nr_rotations, rotations, auxx; // Define integer variables temp1, I_nom_2, indexx, auxx1, nr_rotations, rotations, auxx\r\n" 
"Free Text" "int amplitude_Hall_A, amplitude_Hall_B, amplitude_Hall_C; // Define integer variables amplitude_Hall_A, amplitude_Hall_B, amplitude_Hall_C\r\n" 
"Free Text" "/* Save setup parameters in order to restore them after test is successful */\r\n" 
"Free Text" "REFTST_B = REFTST;\r\n" 
"Free Text" "RINCTST_B = RINCTST;\r\n" 
"Free Text" "OSR_B = OSR;\r\n" 
"Free Text" "ENC2THL_B = ENC2THL;\r\n" 
"Free Text" "UPGRADE_B = UPGRADE;\r\n" 
"Free Text" "SRB UPGRADE, 0xFFFF, 0x8000; //Set UPGRADE using AND mask 0xFFFF and OR mask 0x8000\r\n" 
"Free Text" "//GOTO Read_Autotuning_input, Select_CANmode, NEQ; //Branch to Read_Autotuning_input if Select_CANmode != 0\r\n" 
"Free Text" "//var_i2 = 0;\r\n" 
"Free Text" "//GOTO AutotuningFunction; //Branch to AutotuningFunction" 
"Free Text" "Read_Autotuning_input: //Define label Read_Autotuning_input" 
"Free Text" "var_i2 = IN(9); //Read I/O line 9 data into variable var_i2 ( 0 -> low, 1 -> high )\r\n" 
"Free Text" "AutotuningFunction: //Define label AutotuningFunction" 
"Free Text" "GOTO normal_execution, var_i2, NEQ; //Branch to normal_execution if var_i2 != 0\r\n" 
"Free Text" "OUT(4)=0; //Turn off Ready led\r\n" 
"Free Text" "/* Initial positioning test: */\r\n" 
"Free Text" "I_nom_2 = II2TPROT_M;\r\n" 
"Free Text" "I_nom_2 >>= 1;\r\n" 
"Free Text" "var_i2 = REFTST;\r\n" 
"Free Text" "/*force start mode: a/b voltage:*/\r\n" 
"Free Text" "SRB OSR, 0xFFE7, 0x0; //Set OSR using AND mask 0xFFE7 and OR mask 0x0000\r\n" 
"Free Text" "MODE VT; //Voltage Test Mode\r\n" 
"Free Text" "REFTST_V = 0;//Reference saturation value = 0[V]\r\n" 
"Free Text" "RINCTST_V = 0;//Reference increment value = 0[V/s]\r\n" 
"Free Text" "THTST = -16384;//Electric angle = -16384[IU]\r\n" 
"Free Text" "TINCTST = 0;//Electric angle increment = 0[IU]\r\n" 
"Free Text" "UPD; //update immediate\r\n" 
"Free Text" "/* proceed to hardware stop: */\r\n" 
"Free Text" "ENDINIT; //End Initialization\r\n" 
"Free Text" "/* Wait for Vdc before AXISON: */\r\n" 
"Free Text" "wait_VDC_before_tuning: //Define label wait_VDC_before tuning\r\n" 
"Free Text" "GOTO wait_VDC_before_tuning, FLAGUV, GT; //Branch to wait_VDC_before_tuning if FLAGUV > 0\r\n" 
"Free Text" "/* Activate PWM outputs and Control:*/\r\n" 
"Free Text" "AXISON; //Activate the control loops and PWM outputs\r\n" 
"Free Text" "RINCTST = 2;\r\n" 
"Free Text" "loop_max_crt: //Define label loop_max_crt\r\n" 
"Free Text" "//Define event: After a wait time equal with value 1 \ms\r\n"
"Free Text" "!RT 1;\r\n" 
"Free Text" "WAIT!;//Wait until the event occurs\r\n" 
"Free Text" "REFTST += 2;\r\n" 
"Free Text" "temp1 = REFTST;\r\n" 
"Free Text" "temp1 -= var_i2;\r\n" 
"Free Text" "/*test if REFTST >= initial_REFTST: */\r\n" 
"Free Text" "GOTO nom_crt, temp1, GEQ; //Branch to nom_crt if temp1 >= 0\r\n" 
"Free Text" "temp1 = IQ;\r\n" 
"Free Text" "/* nominal motor current / 2: */\r\n" 
"Free Text" "temp1 -= I_nom_2;\r\n" 
"Free Text" "/* test if current < 3A*/\r\n" 
"Free Text" "GOTO loop_max_crt, temp1, LT; //Branch to loop_max_crt if temp1 < 0\r\n" 
"Free Text" "nom_crt: //Define label nom_crt\r\n" 
"Free Text" "AXISOFF; //Deactivate the control loops and PWM outputs\r\n" 
"Free Text" "/* Test starts:*/\r\n" 
"Free Text" "/* LinHalls_Gain_Offset_Detect:*/\r\n" 
"Free Text" "RINCTST = REFTST;\r\n" 
"Free Text" "/*offset cosinus resolver:*/\r\n" 
"Free Text" "AD6OFF = 32767;\r\n" 
"Free Text" "/*offset sinus resolver:*/\r\n" 
"Free Text" "AD3OFF = 32767;\r\n" 
"Free Text" "/* hall cosinus coefficient:*/\r\n" 
"Free Text" "SRECTCOMP = 4096;\r\n" 
"Free Text" "/*hall sinus coefficient:*/\r\n" 
"Free Text" "SIN2REC = 4096;\r\n" 
"Free Text" "/*HALL C coefficient:*/\r\n" 
"Free Text" "KSLIP = 4096;\r\n" 
"Free Text" "/*HALL C offset:*/\r\n" 
"Free Text" "SFTCWEAK = 32767;\r\n" 
"Free Text" "/*setup sequence for linear halls*/\r\n" 
"Free Text" "indexx = 0;\r\n" 
"Free Text" "auxx1 = 0;\r\n" 
"Free Text" "nr_rotations = 4;\r\n" 
"Free Text" "AD7OFF = 0;\r\n" 
"Free Text" "WEAKINC = 0;\r\n" 
"Free Text" "var_i2 = 0x312;\r\n" 
"Free Text" "(var_i2),dm = -1; //Set data located in DATA memory at address contained in var_i2\r\n" 
"Free Text" "AXISON; //Activate the control loops and PWM outputs\r\n" 
"Free Text" "rotations = nr_rotations;\r\n" 
"Free Text" "again_: //Define label again_\r\n" 
"Free Text" "rotations -= 1;\r\n" 
"Free Text" "indexx = 0;\r\n" 
"Free Text" "NXT_EL_REVOL_LH: //Define label NXT_EL_REVOL_LH\r\n" 
"Free Text" "indexx += 1;\r\n" 
"Free Text" "var_i1 = indexx;\r\n" 
"Free Text" "/*65536 = 1 electrical revolution = 8192*8, 8 = theta increment*/\r\n" 
"Free Text" "var_i1 -= 8192;\r\n" 
"Free Text" "THTST += 8;\r\n" 
"Free Text" "GOTO NXT_EL_REVOL_LH, var_i1, LT; //Branch to NXT_EL_REVOL_LH if var_i1 < 0\r\n" 
"Free Text" "GOTO again_, rotations, GT; //Branch to again_ if rotations > 0\r\n"
"Free Text" "AD3OFF = IDMIN;\r\n" 
"Free Text" "AD6OFF = IDMAX;\r\n" 
"Free Text" "SRECTCOMP = SENSE;\r\n" 
"Free Text" "SIN2REC = ELPOS;\r\n" 
"Free Text" "var_i1 = 0x853;\r\n" 
"Free Text" "KSLIP = (var_i1),dm; //Set KSLIP with data located in DATA memory at address contained in var_i1\r\n" 
"Free Text" "SFTCWEAK = SETAD23;\r\n" 
"Free Text" "amplitude_Hall_B = SSPL;\r\n" 
"Free Text" "amplitude_Hall_B >>= 1;\r\n" 
"Free Text" "auxx = 0x0808;\r\n" 
"Free Text" "auxx1 = (auxx),dm; //Set auxx1 with data located in DATA memory at address contained in auxx\r\n" 
"Free Text" "auxx1 >>= 1;\r\n" 
"Free Text" "amplitude_Hall_B -= auxx1;\r\n" 
"Free Text" "auxx1 = amplitude_Hall_B;\r\n" 
"Free Text" "auxx1 -= 5000;\r\n"
"Free Text" "GOTO missing_Hall, auxx1, LEQ; //Branch to missing_Hall if auxx1 <= 0\r\n" 
"Free Text" "amplitude_Hall_A = CI0;\r\n" 
"Free Text" "amplitude_Hall_A >>= 1;\r\n" 
"Free Text" "auxx = 0x02fd;\r\n" 
"Free Text" "auxx1 = (auxx),dm; //Set auxx1 with data located in DATA memory at address contained in auxx\r\n" 
"Free Text" "auxx1 >>= 1;\r\n" 
"Free Text" "amplitude_Hall_A -= auxx1;\r\n" 
"Free Text" "auxx1 = amplitude_Hall_A;\r\n" 
"Free Text" "auxx1 -= 5000;\r\n"
"Free Text" "GOTO missing_Hall, auxx1, LEQ; //Branch to missing_Hall if auxx1 <= 0\r\n" 
"Free Text" "amplitude_Hall_C = AD7OFF;\r\n" 
"Free Text" "amplitude_Hall_C >>= 1;\r\n" 
"Free Text" "auxx = 0x0852;\r\n" 
"Free Text" "auxx1 = (auxx),dm; //Set auxx1 with data located in DATA memory at address contained in auxx\r\n" 
"Free Text" "auxx1 >>= 1;\r\n" 
"Free Text" "amplitude_Hall_C -= auxx1;\r\n" 
"Free Text" "auxx1 = amplitude_Hall_C;\r\n" 
"Free Text" "auxx1 -= 5000;\r\n"
"Free Text" "GOTO missing_Hall, auxx1, LEQ; //Branch to missing_Hall if auxx1 <= 0\r\n"
"Free Text" "rotations = nr_rotations;\r\n" 
"Free Text" "again_1: //Define label again_1\r\n" 
"Free Text" "rotations -= 1;\r\n" 
"Free Text" "indexx = 0;\r\n" 
"Free Text" "NXT_EL_REVOL1: //Define label NXT_EL_REVOL1\r\n" 
"Free Text" "indexx += 1;\r\n" 
"Free Text" "var_i1 = indexx;\r\n" 
"Free Text" "/*65536 = 1 electrical revolution = 8192*8, 8 = theta increment*/\r\n" 
"Free Text" "var_i1 -= 8192;\r\n" 
"Free Text" "THTST += 8;\r\n" 
"Free Text" "GOTO NXT_EL_REVOL1, var_i1, LT; //Branch to NXT_EL_REVOL1 if var_i1 < 0\r\n" 
"Free Text" "GOTO again_1, rotations, GT; //Branch to again_1 if rotations > 0\r\n" 
"Free Text" "SAP 0; // Set actual position value to 0[IU]\r\n" 
"Free Text" "EREF(H) = REFTST; //Set high part of EREF with REFTST\r\n" 
"Free Text" "//Read voltage reference from variable EREFV\r\n" 
"Free Text" "EXTREF 0;\r\n" 
"Free Text" "MODE VES; //External voltage\r\n" 
"Free Text" "//WEAKINC = 1;\r\n" 
"Free Text" "UPD; //execute immediate\r\n" 
"Free Text" "//Define event: After a wait time equal with value 5000 \s\r\n"
"Free Text" "!RT 5000;\r\n" 
"Free Text" "WAIT!;//Wait until the event occurs\r\n" 
"Free Text" "/*Set the hall disconection protection: */\r\n" 
"Free Text" "auxx1 = ACCPL;\r\n" 
"Free Text" "auxx1 >>= 1;\r\n" 
"Free Text" "ALPHA = 0;\r\n" 
"Free Text" "ALPHA(L) = auxx1; //Set low part of ALPHA with auxx1\r\n" 
"Free Text" "var_lf = APOS;\r\n" 
"Free Text" "var_lf -= 1024;\r\n" 
"Free Text" "GOTO wrong_connection, var_lf, LEQ; //Branch to wrong_connection if var_lf <= 0\r\n" 
"Free Text" "AXISOFF; //Deactivate the control loops and PWM outputs\r\n" 
"Free Text" "/*Test OK*/\r\n" 
"Free Text" "WEAKINC = 1;\r\n" 
"Free Text" "GOTO Restore_params; //Branch to Restore_params\r\n" 
"Free Text" "missing_Hall: //Define label missing_Hall\r\n" 
"Free Text" "/*one or both signals are missing or have a very low amplitude*/\r\n" 
"Free Text" "GOTO missing_Hall_TMLCAN, Select_CANmode, NEQ; //Branch to missing_Hall_TMLCAN if Select_CANmode != 0\r\n" 
"Free Text" "SRB MER, 0xFFFF, 0x20; //Set MER using AND mask 0xFFFF and OR mask 0x0020\r\n" 
"Free Text" "RET;" 
"Free Text" "missing_Hall_TMLCAN: //Define label missing_Hall_TMLCAN\r\n" 
"Free Text" "EREF(H) = 0;\r\n" 
"Free Text" "MODE VT;\r\n" 
"Free Text" "UPD; //Update immediate\r\n" 
"Free Text" "auxx = 0;\r\n" 
"Free Text" "TINCTST = 0;\r\n" 
"Free Text" "WEAKINC = -1;\r\n" 
"Free Text" "THTST = 0;\r\n" 
"Free Text" "dance1: //Define label dance1\r\n" 
"Free Text" "//Define event: After a wait time equal with value 1000 \s\r\n"
"Free Text" "!RT 1000;\r\n" 
"Free Text" "WAIT!;//Wait until the event occurs\r\n" 
"Free Text" "/*60 el. degree:*/\r\n" 
"Free Text" "THTST += 10922;\r\n" 
"Free Text" "UPD; //Update immediate\r\n" 
"Free Text" "auxx += 1;\r\n" 
"Free Text" "auxx1 = auxx;\r\n" 
"Free Text" "auxx1 -= 40;\r\n" 
"Free Text" "GOTO dance1, auxx1, LEQ; //Branch to dance1 if auxx1 <= 0\r\n" 
"Free Text" "AXISOFF; //Deactivate the control loops and PWM outputs\r\n" 
"Free Text" "OUT(4)=0x0010; //Turn on Ready led\r\n" 
"Free Text" "END; //End of program\r\n" 
"Free Text" "wrong_connection: //Define label wrong_connection\r\n" 
"Free Text" "/*Halls (A, B, C) or motor phases (A, B, C) are wrong connected*/\r\n" 
"Free Text" "GOTO wrong_connection_TMLCAN, Select_CANmode, NEQ; //Branch to missing_Hall_TMLCAN if Select_CANmode != 0\r\n" 
"Free Text" "SRB MER, 0xFFFF, 0x20; //Set MER using AND mask 0xFFFF and OR mask 0x0020\r\n" 
"Free Text" "RET;" 
"Free Text" "wrong_connection_TMLCAN: //Define label missing_Hall_TMLCAN\r\n" 
"Free Text" "EREF(H) = 0;\r\n" 
"Free Text" "MODE VT;\r\n" 
"Free Text" "UPD; //Update immediate\r\n" 
"Free Text" "auxx = 0;\r\n" 
"Free Text" "TINCTST = 0;\r\n" 
"Free Text" "/*Halls (A, B) or motor phases (A, B) are wrong connected*/\r\n" 
"Free Text" "WEAKINC = -2;\r\n" 
"Free Text" "dance: //Define label dance\r\n" 
"Free Text" "THTST = 0;\r\n" 
"Free Text" "//Define event: After a wait time equal with value 1000 \s\r\n"
"Free Text" "!RT 1000;\r\n" 
"Free Text" "WAIT!;//Wait until the event occurs\r\n" 
"Free Text" "THTST = 21845;\r\n" 
"Free Text" "UPD; //Update immediate\r\n" 
"Free Text" "//Define event: After a wait time equal with value 1000 \s\r\n"
"Free Text" "!RT 1000;\r\n" 
"Free Text" "WAIT!;//Wait until the event occurs\r\n" 
"Free Text" "auxx += 1;\r\n" 
"Free Text" "auxx1 = auxx;\r\n" 
"Free Text" "auxx1 -= 40;\r\n" 
"Free Text" "GOTO dance, auxx1, LEQ; //Branch to dance if auxx1 <= 0\r\n" 
"Free Text" "AXISOFF; //Deactivate the control loops and PWM outputs\r\n" 
"Free Text" "OUT(4)=0x0010; //Turn on Ready led\r\n" 
"Free Text" "END; //End of program\r\n" 
"Free Text" "Restore_params: //Define label Restore_params\r\n" 
"Free Text" "REFTST = REFTST_B;\r\n" 
"Free Text" "RINCTST = RINCTST_B;\r\n" 
"Free Text" "OSR = OSR_B;\r\n" 
"Free Text" "UPGRADE = UPGRADE_B;\r\n" 
"Free Text" "ENC2THL = ENC2THL_B;\r\n" 
"Free Text" "SAVE; //Save actual setup data in the EEPROM\r\n" 
"Free Text" "OUT(4)=0x0010; //Turn on Ready led\r\n" 
"Free Text" "END; //End of program\r\n" 
"Free Text" "normal_execution: //Define label normal_execution\r\n" 
"Free Text" "ENDINIT; //End Initialization\r\n" 
"Free Text" "wait_VDC: //Define label wait_VDC\r\n" 
"Free Text" "GOTO wait_VDC, FLAGUV, GT; //Branch to wait_VDC if FLAGUV > 0\r\n" 
"Free Text" "AXISON; //Activate the control loops and PWM outputs\r\n" 
"Free Text" "MainStartAddress: //Define label named MainStartAddress\r\n" 
